#!/usr/bin/env python2

"""git merge-message-for

Print composed merge message for submitted PR.

Usage:

    git merge-message-for <OPTIONS> <pull request number> <target branch>

Options:

    -h, --help
        Display this message and exit

    -r <repo>, --repo <repo>
        Use this github repo instead of the 'remote origin' or 'git-land.repo'
        git config settings. Needs to be in "user/repository" form
        or "upstream" to use remote name.

Copyright (C) 2011 by Andreas Gohr <andi@splitbrain.org> git-pull-request plugin.
Modifications for git-land by Berkus 2016.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""
import sys
import getopt
import json
import urllib2
import os
import re
import pipes


def main():
    repo, remote = '', None
    # parse command line options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hr:", ["help", "repo:"])
    except getopt.error, msg:
        print msg
        print "for help use --help"
        sys.exit(2)
    # process options
    for o, a in opts:
        if o in ("-h", "--help"):
            print __doc__
            sys.exit(0)
        if o in ("-r", "--repo"):
            if re.search('/', a):
                repo = a
            else:
                remote = a

    if remote is None and repo == '':
        remote = 'origin'

    # attempt to get token from git config
    token = os.popen("git config --get git-land.token").read().rstrip()
    # get repo name from git config:
    if(repo == ''):
        repo = os.popen('git config git-land.repo').read().strip()

    # get repo name from origin
    if(repo == '' or remote is not None):
        escaped = pipes.quote(remote)
        origin = os.popen("git config remote.%s.url" % escaped).read()
        origin = re.sub("(\.git)?\s*$", "", origin)
        m = re.search(r"\bgithub\.com[:/]([^/]+/[^/]+)$", origin)
        if(m is not None):
            repo = m.group(1)

    if(repo == ''):
        print color_text("Failed to determine github repository name", 'red', True)
        print "The repository is usually automatically detected from your remote origin."
        print "If your origin doesn't point to github, you can specify the repository on"
        print "the command line using the -r parameter, by specifying either a remote or"
        print "the full repository name (user/repo), or configure it using"
        print "git config git-land.repo <user>/<repository>"
        sys.exit(1)

    pullreq = args[0]
    targetbranch = args[1]

    url = "https://api.github.com/repos/%s/pulls/%s" % (repo, pullreq)

    if len(token):
        headers = {'User-Agent': 'git-pull-request', 'Authorization': 'token %s' % token}
    else:
        headers = {'User-Agent': 'git-pull-request'}

    req = urllib2.Request(
        url, headers=headers)
    try:
        response = urllib2.urlopen(req)
    except urllib2.HTTPError, msg:
        print "error loading pull requests for repo %s: %s" % (repo, msg)
        if msg.code == 404:
            # GH replies with 404 when a repo is not found or private and we request without OAUTH
            print "if this is a private repo, please set git-land.token to a valid GH oauth token"
        sys.exit(1)

    data = response.read()
    if (data == ''):
        print "failed to speak with github."
        sys.exit(3)

    data = json.loads(data)
    pr = data
    if pr['head']['repo'] is None:
        print("remote repository for this pull request "
              "does not exist anymore.")
        sys.exit(6)

    branchname = pr['head']['label']

    print "Merge pull-request #%s from %s to %s" % (pullreq, branchname, targetbranch)
    print 
    print pr['title']
    print pr['body']
    print
    print "[close #%s]" % pullreq

    sys.exit(0)

if __name__ == "__main__":
    main()

